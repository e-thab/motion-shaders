Wisdom: https://forum.gamemaker.io/index.php?threads/solved-issue-trying-to-imitate-visual-effect-with-shaders-and-surfaces.109391/

Experiment w/ color
FPS controller
Partial screen effect
More complex objects
Different noise pattern
Generate new random color

Look into: Shadow mapping
https://github.com/capnramses/antons_opengl_tutorials_book/tree/master/38_texture_shadows

Look up: Optical illusions in games

object material textures, potential application for occlusion. use colors to encode during processing rather than edge detection shader

wheres waldo - vision improvement test
occupational therapy; try to find something paper-based
book: persistence of vision in table of contents
what it's like to see as an animal


change color a little bit rather than flipping, start darkening on full white

look for cel shade shader / toon shader

Maya student license

11.6 Qs:
	-Optic flow for 'small movement'... less than a pixel??
	-Necessary assumptions / avoidable assumptions
	-What's displayed? What values do the pixels actually need to take on from the motion vectors?

	-Aperture problem?
	-Finding corners in a shader?
	-Defining windows in a shader?

Optic flow:
	-Only calculate pixels known to be moving
	-Calculate gradients, then plug into equations
	-Convert pix to grayscale
	-Combining 3 types of gradients: temporal horizontal and vertical (same pixel locs), spatial (l/r and u/d neighbors), 

Calculating gradients:
	temporal: diff between this and last frame
	spatial: diff between neighbors: Ix(x,y) = I(x-1,y) - I(x+1,y)

Display:
	vector mapped to 2-color channel representing vector

Meeting 11/22:
	1. Optic flow (all) pixels sticking?
	2. Using flow test sprite
	3. Color ranges in shaders not being used?


Noise:
	Binary:
		each pixel is either black or white
	Linear:
		each pixel has a random monochrome value (R=G=B)
	Full color:
		each pixel has a randomized color value
	Perlin:
		perlin noise
	Fill white:
		all pixels are white

Shaders:
	Invert (pov.gshader): Any pixel that changed from black to some color this frame, invert 
		-best with binary noise
	
	Binary: Original implementation. On c
		
	
	Incremental
		-best with linear noise
	-strange gray effect with binary noise
		-variable for increment amount (change speed)
	
	Fade:
		-noise irrelevant
		-variables for color, difference threshold, and fade speed

	Fade full color:
		-noise irrelevant
		-variables for difference threshold and fade speed
